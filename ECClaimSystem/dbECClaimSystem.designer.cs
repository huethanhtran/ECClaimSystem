#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECClaimSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ECClaimSystem")]
	public partial class dbECClaimSystemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertECClaim(ECClaim instance);
    partial void UpdateECClaim(ECClaim instance);
    partial void DeleteECClaim(ECClaim instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertECEvidence(ECEvidence instance);
    partial void UpdateECEvidence(ECEvidence instance);
    partial void DeleteECEvidence(ECEvidence instance);
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    #endregion
		
		public dbECClaimSystemDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ECClaimSystemConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbECClaimSystemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbECClaimSystemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbECClaimSystemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbECClaimSystemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ECClaim> ECClaims
		{
			get
			{
				return this.GetTable<ECClaim>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ECEvidence> ECEvidences
		{
			get
			{
				return this.GetTable<ECEvidence>();
			}
		}
		
		public System.Data.Linq.Table<Faculty> Faculties
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_ECClaim_GetAllECClaimsOfFaculty")]
		public ISingleResult<sp_ECClaim_GetAllECClaimsOfFacultyResult> sp_ECClaim_GetAllECClaimsOfFaculty([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FacultyId", DbType="Int")] System.Nullable<int> facultyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), facultyId);
			return ((ISingleResult<sp_ECClaim_GetAllECClaimsOfFacultyResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.sp_GetECClaimOfFaculty")]
		public ISingleResult<sp_GetECClaimOfFacultyResult> sp_GetECClaimOfFaculty([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FacultyId", DbType="Int")] System.Nullable<int> facultyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), facultyId);
			return ((ISingleResult<sp_GetECClaimOfFacultyResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ECClaim")]
	public partial class ECClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ClaimId;
		
		private System.Nullable<long> _UserId;
		
		private string _Summary;
		
		private string _Situation;
		
		private string _EffectSituation;
		
		private System.DateTime _CircumstanceStartDate;
		
		private System.DateTime _CircumstanceEndDate;
		
		private System.Nullable<int> _OutCome;
		
		private System.Nullable<System.DateTime> _SubmittedDate;
		
		private System.Nullable<System.DateTime> _FinalClosureDate;
		
		private System.Nullable<int> _ClaimStatus;
		
		private System.Nullable<int> _DecisionStatus;
		
		private System.Nullable<System.DateTime> _DecisionDate;
		
		private System.Nullable<long> _ProcessedUser;
		
		private System.Nullable<bool> _HasEvidence;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<ECEvidence> _ECEvidences;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClaimIdChanging(long value);
    partial void OnClaimIdChanged();
    partial void OnUserIdChanging(System.Nullable<long> value);
    partial void OnUserIdChanged();
    partial void OnSummaryChanging(string value);
    partial void OnSummaryChanged();
    partial void OnSituationChanging(string value);
    partial void OnSituationChanged();
    partial void OnEffectSituationChanging(string value);
    partial void OnEffectSituationChanged();
    partial void OnCircumstanceStartDateChanging(System.DateTime value);
    partial void OnCircumstanceStartDateChanged();
    partial void OnCircumstanceEndDateChanging(System.DateTime value);
    partial void OnCircumstanceEndDateChanged();
    partial void OnOutComeChanging(System.Nullable<int> value);
    partial void OnOutComeChanged();
    partial void OnSubmittedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmittedDateChanged();
    partial void OnFinalClosureDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinalClosureDateChanged();
    partial void OnClaimStatusChanging(System.Nullable<int> value);
    partial void OnClaimStatusChanged();
    partial void OnDecisionStatusChanging(System.Nullable<int> value);
    partial void OnDecisionStatusChanged();
    partial void OnDecisionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDecisionDateChanged();
    partial void OnProcessedUserChanging(System.Nullable<long> value);
    partial void OnProcessedUserChanged();
    partial void OnHasEvidenceChanging(System.Nullable<bool> value);
    partial void OnHasEvidenceChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public ECClaim()
		{
			this._ECEvidences = new EntitySet<ECEvidence>(new Action<ECEvidence>(this.attach_ECEvidences), new Action<ECEvidence>(this.detach_ECEvidences));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ClaimId
		{
			get
			{
				return this._ClaimId;
			}
			set
			{
				if ((this._ClaimId != value))
				{
					this.OnClaimIdChanging(value);
					this.SendPropertyChanging();
					this._ClaimId = value;
					this.SendPropertyChanged("ClaimId");
					this.OnClaimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt")]
		public System.Nullable<long> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(200)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this.OnSummaryChanging(value);
					this.SendPropertyChanging();
					this._Summary = value;
					this.SendPropertyChanged("Summary");
					this.OnSummaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Situation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Situation
		{
			get
			{
				return this._Situation;
			}
			set
			{
				if ((this._Situation != value))
				{
					this.OnSituationChanging(value);
					this.SendPropertyChanging();
					this._Situation = value;
					this.SendPropertyChanged("Situation");
					this.OnSituationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectSituation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EffectSituation
		{
			get
			{
				return this._EffectSituation;
			}
			set
			{
				if ((this._EffectSituation != value))
				{
					this.OnEffectSituationChanging(value);
					this.SendPropertyChanging();
					this._EffectSituation = value;
					this.SendPropertyChanged("EffectSituation");
					this.OnEffectSituationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircumstanceStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime CircumstanceStartDate
		{
			get
			{
				return this._CircumstanceStartDate;
			}
			set
			{
				if ((this._CircumstanceStartDate != value))
				{
					this.OnCircumstanceStartDateChanging(value);
					this.SendPropertyChanging();
					this._CircumstanceStartDate = value;
					this.SendPropertyChanged("CircumstanceStartDate");
					this.OnCircumstanceStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircumstanceEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime CircumstanceEndDate
		{
			get
			{
				return this._CircumstanceEndDate;
			}
			set
			{
				if ((this._CircumstanceEndDate != value))
				{
					this.OnCircumstanceEndDateChanging(value);
					this.SendPropertyChanging();
					this._CircumstanceEndDate = value;
					this.SendPropertyChanged("CircumstanceEndDate");
					this.OnCircumstanceEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutCome", DbType="Int")]
		public System.Nullable<int> OutCome
		{
			get
			{
				return this._OutCome;
			}
			set
			{
				if ((this._OutCome != value))
				{
					this.OnOutComeChanging(value);
					this.SendPropertyChanging();
					this._OutCome = value;
					this.SendPropertyChanged("OutCome");
					this.OnOutComeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubmittedDate
		{
			get
			{
				return this._SubmittedDate;
			}
			set
			{
				if ((this._SubmittedDate != value))
				{
					this.OnSubmittedDateChanging(value);
					this.SendPropertyChanging();
					this._SubmittedDate = value;
					this.SendPropertyChanged("SubmittedDate");
					this.OnSubmittedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalClosureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinalClosureDate
		{
			get
			{
				return this._FinalClosureDate;
			}
			set
			{
				if ((this._FinalClosureDate != value))
				{
					this.OnFinalClosureDateChanging(value);
					this.SendPropertyChanging();
					this._FinalClosureDate = value;
					this.SendPropertyChanged("FinalClosureDate");
					this.OnFinalClosureDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimStatus", DbType="Int")]
		public System.Nullable<int> ClaimStatus
		{
			get
			{
				return this._ClaimStatus;
			}
			set
			{
				if ((this._ClaimStatus != value))
				{
					this.OnClaimStatusChanging(value);
					this.SendPropertyChanging();
					this._ClaimStatus = value;
					this.SendPropertyChanged("ClaimStatus");
					this.OnClaimStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionStatus", DbType="Int")]
		public System.Nullable<int> DecisionStatus
		{
			get
			{
				return this._DecisionStatus;
			}
			set
			{
				if ((this._DecisionStatus != value))
				{
					this.OnDecisionStatusChanging(value);
					this.SendPropertyChanging();
					this._DecisionStatus = value;
					this.SendPropertyChanged("DecisionStatus");
					this.OnDecisionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DecisionDate
		{
			get
			{
				return this._DecisionDate;
			}
			set
			{
				if ((this._DecisionDate != value))
				{
					this.OnDecisionDateChanging(value);
					this.SendPropertyChanging();
					this._DecisionDate = value;
					this.SendPropertyChanged("DecisionDate");
					this.OnDecisionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessedUser", DbType="BigInt")]
		public System.Nullable<long> ProcessedUser
		{
			get
			{
				return this._ProcessedUser;
			}
			set
			{
				if ((this._ProcessedUser != value))
				{
					this.OnProcessedUserChanging(value);
					this.SendPropertyChanging();
					this._ProcessedUser = value;
					this.SendPropertyChanged("ProcessedUser");
					this.OnProcessedUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasEvidence", DbType="Bit")]
		public System.Nullable<bool> HasEvidence
		{
			get
			{
				return this._HasEvidence;
			}
			set
			{
				if ((this._HasEvidence != value))
				{
					this.OnHasEvidenceChanging(value);
					this.SendPropertyChanging();
					this._HasEvidence = value;
					this.SendPropertyChanged("HasEvidence");
					this.OnHasEvidenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ECClaim_ECEvidence", Storage="_ECEvidences", ThisKey="ClaimId", OtherKey="ClaimId")]
		public EntitySet<ECEvidence> ECEvidences
		{
			get
			{
				return this._ECEvidences;
			}
			set
			{
				this._ECEvidences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ECClaim", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ECClaims.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ECClaims.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<long>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ECEvidences(ECEvidence entity)
		{
			this.SendPropertyChanging();
			entity.ECClaim = this;
		}
		
		private void detach_ECEvidences(ECEvidence entity)
		{
			this.SendPropertyChanging();
			entity.ECClaim = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _UserId;
		
		private string _AccountId;
		
		private string _Password;
		
		private string _UserFullName;
		
		private System.DateTime _BirthDay;
		
		private string _Address;
		
		private int _Gender;
		
		private string _Phone;
		
		private string _Email;
		
		private System.Nullable<int> _FacultyId;
		
		private int _RoleId;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<ECClaim> _ECClaims;
		
		private EntityRef<Faculty> _Faculty;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(long value);
    partial void OnUserIdChanged();
    partial void OnAccountIdChanging(string value);
    partial void OnAccountIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserFullNameChanging(string value);
    partial void OnUserFullNameChanged();
    partial void OnBirthDayChanging(System.DateTime value);
    partial void OnBirthDayChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnGenderChanging(int value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFacultyIdChanging(System.Nullable<int> value);
    partial void OnFacultyIdChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public User()
		{
			this._ECClaims = new EntitySet<ECClaim>(new Action<ECClaim>(this.attach_ECClaims), new Action<ECClaim>(this.detach_ECClaims));
			this._Faculty = default(EntityRef<Faculty>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFullName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string UserFullName
		{
			get
			{
				return this._UserFullName;
			}
			set
			{
				if ((this._UserFullName != value))
				{
					this.OnUserFullNameChanging(value);
					this.SendPropertyChanging();
					this._UserFullName = value;
					this.SendPropertyChanged("UserFullName");
					this.OnUserFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDay", DbType="DateTime NOT NULL")]
		public System.DateTime BirthDay
		{
			get
			{
				return this._BirthDay;
			}
			set
			{
				if ((this._BirthDay != value))
				{
					this.OnBirthDayChanging(value);
					this.SendPropertyChanging();
					this._BirthDay = value;
					this.SendPropertyChanged("BirthDay");
					this.OnBirthDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int NOT NULL")]
		public int Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyId", DbType="Int")]
		public System.Nullable<int> FacultyId
		{
			get
			{
				return this._FacultyId;
			}
			set
			{
				if ((this._FacultyId != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIdChanging(value);
					this.SendPropertyChanging();
					this._FacultyId = value;
					this.SendPropertyChanged("FacultyId");
					this.OnFacultyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ECClaim", Storage="_ECClaims", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ECClaim> ECClaims
		{
			get
			{
				return this._ECClaims;
			}
			set
			{
				this._ECClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_User", Storage="_Faculty", ThisKey="FacultyId", OtherKey="FacultyId", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._FacultyId = value.FacultyId;
					}
					else
					{
						this._FacultyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ECClaims(ECClaim entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ECClaims(ECClaim entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ECEvidence")]
	public partial class ECEvidence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvidenceId;
		
		private string _EvidenceName;
		
		private long _ClaimId;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _Active;
		
		private EntityRef<ECClaim> _ECClaim;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvidenceIdChanging(int value);
    partial void OnEvidenceIdChanged();
    partial void OnEvidenceNameChanging(string value);
    partial void OnEvidenceNameChanged();
    partial void OnClaimIdChanging(long value);
    partial void OnClaimIdChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public ECEvidence()
		{
			this._ECClaim = default(EntityRef<ECClaim>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvidenceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvidenceId
		{
			get
			{
				return this._EvidenceId;
			}
			set
			{
				if ((this._EvidenceId != value))
				{
					this.OnEvidenceIdChanging(value);
					this.SendPropertyChanging();
					this._EvidenceId = value;
					this.SendPropertyChanged("EvidenceId");
					this.OnEvidenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvidenceName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EvidenceName
		{
			get
			{
				return this._EvidenceName;
			}
			set
			{
				if ((this._EvidenceName != value))
				{
					this.OnEvidenceNameChanging(value);
					this.SendPropertyChanging();
					this._EvidenceName = value;
					this.SendPropertyChanged("EvidenceName");
					this.OnEvidenceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimId", DbType="BigInt NOT NULL")]
		public long ClaimId
		{
			get
			{
				return this._ClaimId;
			}
			set
			{
				if ((this._ClaimId != value))
				{
					if (this._ECClaim.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClaimIdChanging(value);
					this.SendPropertyChanging();
					this._ClaimId = value;
					this.SendPropertyChanged("ClaimId");
					this.OnClaimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ECClaim_ECEvidence", Storage="_ECClaim", ThisKey="ClaimId", OtherKey="ClaimId", IsForeignKey=true)]
		public ECClaim ECClaim
		{
			get
			{
				return this._ECClaim.Entity;
			}
			set
			{
				ECClaim previousValue = this._ECClaim.Entity;
				if (((previousValue != value) 
							|| (this._ECClaim.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ECClaim.Entity = null;
						previousValue.ECEvidences.Remove(this);
					}
					this._ECClaim.Entity = value;
					if ((value != null))
					{
						value.ECEvidences.Add(this);
						this._ClaimId = value.ClaimId;
					}
					else
					{
						this._ClaimId = default(long);
					}
					this.SendPropertyChanged("ECClaim");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FacultyId;
		
		private string _FacultyCode;
		
		private string _FacultyName;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacultyIdChanging(int value);
    partial void OnFacultyIdChanged();
    partial void OnFacultyCodeChanging(string value);
    partial void OnFacultyCodeChanged();
    partial void OnFacultyNameChanging(string value);
    partial void OnFacultyNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Faculty()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FacultyId
		{
			get
			{
				return this._FacultyId;
			}
			set
			{
				if ((this._FacultyId != value))
				{
					this.OnFacultyIdChanging(value);
					this.SendPropertyChanging();
					this._FacultyId = value;
					this.SendPropertyChanged("FacultyId");
					this.OnFacultyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyCode", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FacultyCode
		{
			get
			{
				return this._FacultyCode;
			}
			set
			{
				if ((this._FacultyCode != value))
				{
					this.OnFacultyCodeChanging(value);
					this.SendPropertyChanging();
					this._FacultyCode = value;
					this.SendPropertyChanged("FacultyCode");
					this.OnFacultyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string FacultyName
		{
			get
			{
				return this._FacultyName;
			}
			set
			{
				if ((this._FacultyName != value))
				{
					this.OnFacultyNameChanging(value);
					this.SendPropertyChanging();
					this._FacultyName = value;
					this.SendPropertyChanged("FacultyName");
					this.OnFacultyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_User", Storage="_Users", ThisKey="FacultyId", OtherKey="FacultyId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private System.Nullable<bool> _Active;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Key;
		
		private string _Value;
		
		private System.Nullable<bool> _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(200)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class sp_ECClaim_GetAllECClaimsOfFacultyResult
	{
		
		private long _ClaimId;
		
		private System.Nullable<long> _UserId;
		
		private string _Summary;
		
		private string _Situation;
		
		private string _EffectSituation;
		
		private System.DateTime _CircumstanceStartDate;
		
		private System.DateTime _CircumstanceEndDate;
		
		private System.Nullable<int> _OutCome;
		
		private System.Nullable<System.DateTime> _SubmittedDate;
		
		private System.Nullable<System.DateTime> _FinalClosureDate;
		
		private System.Nullable<int> _ClaimStatus;
		
		private System.Nullable<int> _DecisionStatus;
		
		private System.Nullable<System.DateTime> _DecisionDate;
		
		private System.Nullable<long> _ProcessedUser;
		
		private System.Nullable<bool> _HasEvidence;
		
		private System.Nullable<bool> _Active;
		
		public sp_ECClaim_GetAllECClaimsOfFacultyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimId", DbType="BigInt NOT NULL")]
		public long ClaimId
		{
			get
			{
				return this._ClaimId;
			}
			set
			{
				if ((this._ClaimId != value))
				{
					this._ClaimId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt")]
		public System.Nullable<long> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(200)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this._Summary = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Situation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Situation
		{
			get
			{
				return this._Situation;
			}
			set
			{
				if ((this._Situation != value))
				{
					this._Situation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectSituation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EffectSituation
		{
			get
			{
				return this._EffectSituation;
			}
			set
			{
				if ((this._EffectSituation != value))
				{
					this._EffectSituation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircumstanceStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime CircumstanceStartDate
		{
			get
			{
				return this._CircumstanceStartDate;
			}
			set
			{
				if ((this._CircumstanceStartDate != value))
				{
					this._CircumstanceStartDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircumstanceEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime CircumstanceEndDate
		{
			get
			{
				return this._CircumstanceEndDate;
			}
			set
			{
				if ((this._CircumstanceEndDate != value))
				{
					this._CircumstanceEndDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutCome", DbType="Int")]
		public System.Nullable<int> OutCome
		{
			get
			{
				return this._OutCome;
			}
			set
			{
				if ((this._OutCome != value))
				{
					this._OutCome = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubmittedDate
		{
			get
			{
				return this._SubmittedDate;
			}
			set
			{
				if ((this._SubmittedDate != value))
				{
					this._SubmittedDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalClosureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinalClosureDate
		{
			get
			{
				return this._FinalClosureDate;
			}
			set
			{
				if ((this._FinalClosureDate != value))
				{
					this._FinalClosureDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimStatus", DbType="Int")]
		public System.Nullable<int> ClaimStatus
		{
			get
			{
				return this._ClaimStatus;
			}
			set
			{
				if ((this._ClaimStatus != value))
				{
					this._ClaimStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionStatus", DbType="Int")]
		public System.Nullable<int> DecisionStatus
		{
			get
			{
				return this._DecisionStatus;
			}
			set
			{
				if ((this._DecisionStatus != value))
				{
					this._DecisionStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DecisionDate
		{
			get
			{
				return this._DecisionDate;
			}
			set
			{
				if ((this._DecisionDate != value))
				{
					this._DecisionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessedUser", DbType="BigInt")]
		public System.Nullable<long> ProcessedUser
		{
			get
			{
				return this._ProcessedUser;
			}
			set
			{
				if ((this._ProcessedUser != value))
				{
					this._ProcessedUser = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasEvidence", DbType="Bit")]
		public System.Nullable<bool> HasEvidence
		{
			get
			{
				return this._HasEvidence;
			}
			set
			{
				if ((this._HasEvidence != value))
				{
					this._HasEvidence = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
	}
	
	public partial class sp_GetECClaimOfFacultyResult
	{
		
		private long _ClaimId;
		
		private System.Nullable<long> _UserId;
		
		private string _Summary;
		
		private string _Situation;
		
		private string _EffectSituation;
		
		private System.DateTime _CircumstanceStartDate;
		
		private System.DateTime _CircumstanceEndDate;
		
		private System.Nullable<int> _OutCome;
		
		private System.Nullable<System.DateTime> _SubmittedDate;
		
		private System.Nullable<System.DateTime> _FinalClosureDate;
		
		private System.Nullable<int> _ClaimStatus;
		
		private System.Nullable<int> _DecisionStatus;
		
		private System.Nullable<System.DateTime> _DecisionDate;
		
		private System.Nullable<long> _ProcessedUser;
		
		private System.Nullable<bool> _HasEvidence;
		
		private System.Nullable<bool> _Active;
		
		public sp_GetECClaimOfFacultyResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimId", DbType="BigInt NOT NULL")]
		public long ClaimId
		{
			get
			{
				return this._ClaimId;
			}
			set
			{
				if ((this._ClaimId != value))
				{
					this._ClaimId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="BigInt")]
		public System.Nullable<long> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Summary", DbType="NVarChar(200)")]
		public string Summary
		{
			get
			{
				return this._Summary;
			}
			set
			{
				if ((this._Summary != value))
				{
					this._Summary = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Situation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Situation
		{
			get
			{
				return this._Situation;
			}
			set
			{
				if ((this._Situation != value))
				{
					this._Situation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectSituation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EffectSituation
		{
			get
			{
				return this._EffectSituation;
			}
			set
			{
				if ((this._EffectSituation != value))
				{
					this._EffectSituation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircumstanceStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime CircumstanceStartDate
		{
			get
			{
				return this._CircumstanceStartDate;
			}
			set
			{
				if ((this._CircumstanceStartDate != value))
				{
					this._CircumstanceStartDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircumstanceEndDate", DbType="DateTime NOT NULL")]
		public System.DateTime CircumstanceEndDate
		{
			get
			{
				return this._CircumstanceEndDate;
			}
			set
			{
				if ((this._CircumstanceEndDate != value))
				{
					this._CircumstanceEndDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutCome", DbType="Int")]
		public System.Nullable<int> OutCome
		{
			get
			{
				return this._OutCome;
			}
			set
			{
				if ((this._OutCome != value))
				{
					this._OutCome = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SubmittedDate
		{
			get
			{
				return this._SubmittedDate;
			}
			set
			{
				if ((this._SubmittedDate != value))
				{
					this._SubmittedDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalClosureDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinalClosureDate
		{
			get
			{
				return this._FinalClosureDate;
			}
			set
			{
				if ((this._FinalClosureDate != value))
				{
					this._FinalClosureDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimStatus", DbType="Int")]
		public System.Nullable<int> ClaimStatus
		{
			get
			{
				return this._ClaimStatus;
			}
			set
			{
				if ((this._ClaimStatus != value))
				{
					this._ClaimStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionStatus", DbType="Int")]
		public System.Nullable<int> DecisionStatus
		{
			get
			{
				return this._DecisionStatus;
			}
			set
			{
				if ((this._DecisionStatus != value))
				{
					this._DecisionStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecisionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DecisionDate
		{
			get
			{
				return this._DecisionDate;
			}
			set
			{
				if ((this._DecisionDate != value))
				{
					this._DecisionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessedUser", DbType="BigInt")]
		public System.Nullable<long> ProcessedUser
		{
			get
			{
				return this._ProcessedUser;
			}
			set
			{
				if ((this._ProcessedUser != value))
				{
					this._ProcessedUser = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasEvidence", DbType="Bit")]
		public System.Nullable<bool> HasEvidence
		{
			get
			{
				return this._HasEvidence;
			}
			set
			{
				if ((this._HasEvidence != value))
				{
					this._HasEvidence = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
